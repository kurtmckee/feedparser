[tox]
min_version = 4.17.0
envlist =
    coverage_erase
    py{3.13, 3.12, 3.11, 3.10, 3.9}{-chardet, }
    pypy{3.11}{-chardet, }
    coverage_report
    docs
    mypy
labels =
    ci-test-linux = py{3.13, 3.12, 3.11, 3.10, 3.9}-chardet, pypy{3.11}-chardet
    ci-test-macos = py{3.13, 3.9}-chardet
    ci-test-windows = py{3.13, 3.9}-chardet
    update = update


[testenv]
description = Run the test suite ({env_name})
depends =
    py{3.13, 3.12, 3.11, 3.10, 3.9}{-chardet, }: coverage_erase
    pypy{3.11}{-chardet, }: coverage_erase
package = wheel
wheel_build_env = build_wheel
deps =
    -r requirements/test/requirements.txt
    chardet: chardet
commands =
    coverage run -m pytest {posargs:}


[testenv:coverage_erase]
description = Erase .coverage* files before testing
deps =
    coverage[toml]
commands =
    coverage erase


[testenv:coverage_report]
description = Report code coverage after testing
depends =
    py{3.13, 3.12, 3.11, 3.10, 3.9, py3.10}{-chardet, }
    pypy{3.11}{-chardet, }
deps =
    coverage[toml]
commands_pre =
    coverage combine
    coverage html --fail-under=0
commands =
    coverage report


[testenv:docs]
description = Build and lint the documentation
skip_install = True
base_python = py3.13
deps = -r requirements/docs/requirements.txt
commands =
    sphinx-build -EWq -j auto --keep-going docs/ build/docs/


[testenv:mypy]
description = Lint type annotations
base_python = py3.13
deps = -r requirements/mypy/requirements.txt
commands =
    mypy


[testenv:update]
recreate = true
skip_install = true
description = Update requirements and tool versions
base_python = py3.13
setenv =
    # The actionlint pre-commit hook needs the GOCACHE environment variables.
    GOCACHE={env_dir}/.gocache
deps =
    poetry
    poetry-plugin-export
    pre-commit
    upadup
commands =
    # Update test requirements
    poetry update --directory="requirements/docs" --lock
    poetry export --directory="requirements/docs" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/mypy" --lock
    poetry export --directory="requirements/mypy" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/test" --lock
    poetry export --directory="requirements/test" --output="requirements.txt" --without-hashes

    # Update pre-commit hook versions
    pre-commit autoupdate
    upadup

    # Run pre-commit immediately, but ignore its exit code
    - pre-commit run -a


[flake8]
max-line-length = 88
extend-ignore = E203
